---
- name: Ensure dedicated oakestra repository directory exists
  ansible.builtin.file:
    path: "{{ path }}"
    state: directory
  register: repo_dir

- name: Clone repository if not already present
  ansible.builtin.git:
    repo: "{{ repo }}"
    dest: "{{ path }}"
    update: true
  when: not repo_dir.stat.exists

- name: Check if {{ commit }} exists locally
  ansible.builtin.command:
    cmd: git cat-file -t "{{ commit }}"
  args:
    chdir: "{{ path }}"
  register: commit_check_local
  ignore_errors: true

- name: Debug commit_check_local variable
  ansible.builtin.debug:
    msg: "{{ commit_check_local }}"
  when: commit_check_local is defined

- name: Set git_version to {{ commit }} if valid
  set_fact:
    git_version: "{{ commit }}"
  when: commit_check_local.rc == 0

- name: Check if {{ branch }} exists locally
  ansible.builtin.command:
    cmd: git cat-file -t "{{ branch }}"
  args:
    chdir: "{{ path }}"
  register: branch_check_local
  ignore_errors: true
  when: commit_check_local.rc != 0


- name: Debug branch_check_local variable
  ansible.builtin.debug:
    msg: "{{ branch_check_local }}"
  when: branch_check_local is defined

###############################################################################Ã 
- name: Set check_remote to true if failed to retrieve locally else set to false if successful
  set_fact:
    check_remote: "{{ commit_check_local.rc != 0 and branch_check_local is defined and branch_check_local.rc != 0 }}"

  # git ls-remote --refs origin | grep "{{ commit }}"
- name: Check if {{ commit }} exists on remote
  ansible.builtin.shell:
    cmd: "git ls-remote --refs origin | grep '{{ commit }}'"
  args:
    chdir: "{{ path }}"
  register: commit_check_remote
  ignore_errors: true
  when: check_remote

- name: Debug commit_check_remote variable
  ansible.builtin.debug:
    msg: "{{ commit_check_remote }}"
  when: commit_check_remote is defined

- name: Extract branch reference from commit_check_remote
  ansible.builtin.set_fact:
    branch_ref: "{{ commit_check_remote.stdout | regex_replace('^.*\\s', '') }}"
  when: check_remote and commit_check_remote is defined and commit_check_remote.rc == 0 and commit_check_remote.stdout != ''

- name: Fetch the branch from remote
  ansible.builtin.command:
    cmd: "git fetch origin '{{ branch_ref }}:{{ branch | trim }}'"
  args:
    chdir: "{{ path }}"
  register: branch_fetch
  ignore_errors: true
  when: check_remote and commit_check_remote is defined and commit_check_remote.rc == 0

- name: Set git_version to {{ branch }} if branch_fetch is successful
  set_fact:
    git_version: "{{ branch }}"
  when: check_remote and branch_fetch is defined and branch_fetch.rc == 0

- name: Debug git_version variable
  ansible.builtin.debug:
    msg: "Executing version: {{ git_version }}, fork: {{ check_remote }}"
  when: git_version is defined

- name: Ensure repository is at the correct state (commit or branch)
  ansible.builtin.git:
    repo: "{{ repo }}"
    dest: "{{ path }}"
    version: "{{ git_version }}"
    force: true

- name: Fetch all tags from remote
  ansible.builtin.command:
    cmd: git fetch --tags --force
  become: true
  args:
    chdir: "{{ path }}"
