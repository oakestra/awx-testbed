- name: Deploy components for 1DOC topology host ({{ input_data.group_1doc }})
  hosts: "{{ input_data.group_1doc }}"
  gather_facts: true
  tasks:
    - name: Retrieve {{ inventory_hostname }} hostname IP address
      set_fact:
        current_ip: "{{ hostvars[inventory_hostname].ansible_host | default(hostvars[inventory_hostname].ansible_ssh_host, 'IP address not found') }}"  

    - name: Check {{ inventory_hostname }} IP validity
      fail:
        msg: "IP address not found for current node {{ inventory_hostname }}"
      when: current_ip == "IP address not found"


    - name: Verify Oakestra repo is cloned (node {{ inventory_hostname }})
      include_role:
        name: ensure-oakestra-repo-is-cloned
      vars:
        path: "{{ oak_repo_path }}"
        repo: "{{ oak_repo_link }}"
        branch: "{{ oak_repo_version }}"
        commit: "{{ oak_repo_commit }}"

    - name: Start 1DOC components (node {{ inventory_hostname }})
      include_role:
        name: start-1-doc
      vars:
        rootIP: "{{ current_ip }}"
        clusterName: "{{ inventory_hostname }}"
        clusterLocation: "Garching2"
        additionalComposeOverrides: "-f override-alpha-versions.yaml"

    - name: Set OAK_STATUS and OAK_ROLE by including role
      include_role:
        name: set-role-availability
      vars:
        role: "worker_{{ inventory_hostname }}"
        status: "busy"

    - name: Setup network manager entrypoint for node {{ inventory_hostname }}
      include_role:
        name: setup-net-manager
      vars:
        nodeIP: "{{ current_ip }}"
        clusterIP: "{{ current_ip }}"
        path: "{{ oak_repo_path }}"
        repo: "{{ oak_repo_link }}"
        branch: "{{ oak_repo_version }}"

    - name: Run net-manager on node {{ inventory_hostname }}
      shell: 'nohup sudo /bin/NetManager -p 6000 </dev/null >/tmp/netmanager.log 2>&1 &'
      become: true
      ignore_errors: false

    - name: Setup node engine entrypoint for node {{ inventory_hostname }}
      include_role:
        name: setup-node-engine
      vars:
        nodeIP: "{{ cluster_node_ip }}"
        clusterIP: "{{ cluster_node_ip }}"
        path: "{{ oak_repo_path }}"
        repo: "{{ oak_repo_link }}"
        branch: "{{ oak_repo_version }}"
        commit: "{{ oak_repo_commit }}"

    - name: Run node-engine on node {{ inventory_hostname }}
      environment:
        CLUSTER_IP: '{{ current_ip }}'
      shell: 'nohup sudo /bin/NodeEngine -n 6000 -p 10100 </dev/null >/tmp/nodeengine.log 2>&1 &'
      become: true
      ignore_errors: false


- name: Define stats for component status check
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Read {{ input_data.topology_filename }} topology descriptor JSON file
      ansible.builtin.slurp:
        src: "{{ testbed_tmp_path }}/{{ topologies_folder }}/{{ input_data.topology_filename }}"
      register: json_file_content

    - name: Decode {{ input_data.topology_filename }} JSON content
      set_fact:
        topology_descriptor: "{{ json_file_content.content | b64decode }}"

    - name: Set stats for component status check
      set_stats:
        data:
          group_1doc: "{{ input_data.group_1doc }}"
          group_mdoc_root: "[]"
          group_mdoc_workers: "[]"
          group_mdnc_root: "[]"
          group_mdnc_clusters: "[]"
          group_mdnc_workers: "[]"
          onedoc: true
          mdoc: false
          topology_desc: "{{ topology_descriptor }}"
