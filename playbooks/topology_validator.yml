---
- name: 1. Topology Validator Phase
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Create a temporary directory for testbed files
      ansible.builtin.tempfile:
        state: directory
        suffix: testbed
        path: /tmp/
      register: temp_repo_dir

    - name: Clone the testbed repository
      ansible.builtin.git:
        repo: "{{ testbed_repo }}"
        dest: "{{ temp_repo_dir.path }}"
        version: "{{ testbed_repo_branch }}" # Branch of testbed repository
        force: true

    - name: Checkout the specific commit
      ansible.builtin.command:
        cmd: git checkout {{ testbed_repo_branch }}
        chdir: "{{ temp_repo_dir.path }}"
      register: git_checkout

    - name: Ensure the commit checkout
      ansible.builtin.assert:
        that:
          - git_checkout.rc == 0
        fail_msg: "Failed to checkout commit {{ testbed_repo_branch }}"

    - name: Register testbed repository files
      ansible.builtin.find:
        paths: "{{ temp_repo_dir.path }}"
        recurse: yes
      register: files

    - name: List testbed repository files
      ansible.builtin.debug:
        msg: "{{ files.files | map(attribute='path') | list }}"
        
    - name: Read {{ topology_descriptor }} topology descriptor JSON file
      ansible.builtin.slurp:
        src: "{{ temp_repo_dir.path }}/topologies/{{ topology_descriptor }}"
      register: json_file_content

    - name: Decode {{ topology_descriptor }} JSON content
      set_fact:
        topology_descriptor_content: "{{ json_file_content.content | b64decode }}"

    - name: Display {{ topology_descriptor }}
      ansible.builtin.debug:
        msg: "{{ topology_descriptor_content }}"

    - name: Execute validator script for {{ topology_descriptor }}
      command: python3 "{{ temp_repo_dir.path }}"/utils/topology_validator/validator.py "{{ temp_repo_dir.path }}/topologies/{{ topology_descriptor }}"
      register: validation_result

    - name: Check topology validity script execution
      ansible.builtin.assert:
        that:
          - validation_result.rc == 0
        fail_msg: "Failed to validate the topology descriptor"

    - name: Store validation result
      ansible.builtin.set_fact:
        TOPOLOGY_VALIDITY: "{{ validation_result.stdout }}"

    - name: Stop execution if topology descriptor is invalid
      fail:
        msg: "Topology descriptor {{ topology_descriptor }} is not valid"
      when: not TOPOLOGY_VALIDITY

    - name: "Set facts for provisioning phase"
      set_stats:
        data:
          topology_desc: "{{ topology_descriptor_content | to_json}}"
          topology_validity: "{{ TOPOLOGY_VALIDITY | bool}}"
          oak_repo_branch: "{{ branch }}"
          oak_repo_commit: "{{ commit }}"
          oak_net_repo_branch: "{{ net_branch }}"
          oak_net_repo_commit: "{{ net_commit }}"
          testbed_tmp_path: "{{ temp_repo_dir.path }}"
