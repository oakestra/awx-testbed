- name: 2. Host Provisioning Phase
  hosts: localhost
  tasks:

    - name: Parse JSON topology structure
      set_fact:
        topology: "{{ topology_desc | from_json }}"

    - name: Retrieved topology
      debug:
        var: topology

    - name: Compute required number of hosts based on topology
      set_fact:
        num_clusters: "{{ topology.topology_descriptor.cluster_list | length }}"
        num_nodes: "{{ topology.topology_descriptor.cluster_list | map(attribute='workers_number') | sum }}"
        onedoc: "{{ topology.topology_descriptor.onedoc | bool }}"
        mdoc: "{{ topology.topology_descriptor.mdoc | bool }}"

    - name: Compute requested_vms based on onedoc and mdoc flags
      set_fact:
        requested_vms: >-
          {%- if onedoc -%}
          1
          {%- elif mdoc -%}
          {{ (1 | int) + (num_nodes | int) }}
          {%- else -%}
          {{ (1 | int) + (num_clusters | int) + (num_nodes | int) }}
          {%- endif -%}

    - name: Store requested_vms in stats
      set_stats:
        data:
          requested_vms: "{{ requested_vms }}"

- name: Check hosts availability by inspecting $OAK_STATUS
  hosts: all
  gather_facts: false
  tasks:
    - name: Check if OAK_STATUS is set to 'free' in /etc/environment for each inventory host
      shell: |
        grep -q '^OAK_STATUS=free' /etc/environment
      register: oak_status_check
      changed_when: false
      failed_when: oak_status_check.rc != 0 and oak_status_check.rc != 1

    - name: Debug host OAK_STATUS check result
      debug:
        msg: "Host {{ inventory_hostname }} OAK_STATUS is set to 'free'"
      when: oak_status_check.rc == 0

    - name: Set host availability if OAK_STATUS is 'free'
      set_fact:
        host_available: true
      when: oak_status_check.rc == 0

    - name: Set host availability if OAK_STATUS is not set to 'free'
      set_fact:
        host_available: false
      when: oak_status_check.rc == 1

    - name: Add host to available host list if OAK_STATUS is 'free'
      set_fact:
        available_hosts: "{{ available_hosts | default([]) + [inventory_hostname] }}"
      when: host_available
      delegate_facts: true

- name: Verify enough hosts are available for topology deployment
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Retrieve available hosts
      set_fact:
        available_hosts: "{{ hostvars | dict2items | selectattr('value.host_available', 'defined') | selectattr('value.host_available', 'eq', True) | map(attribute='key') | list }}"

    - name: Remove localhost from available hosts
      set_fact:
        available_hosts: "{{ available_hosts | difference(['localhost']) }}"

    - name: List available hosts
      debug:
        msg: "Available hosts: {{ available_hosts }}"

    - name: Requested VMs display
      debug:
        msg: "Total VMs: {{ requested_vms }}"

    - name: Set availability flag based on available hosts
      set_fact:
        enough_hosts: "{{ available_hosts | length >= requested_vms | int }}"

    - name: Availability failure
      fail:
        msg: "Not enough available hosts. Required: {{ requested_vms }}, Available: {{ available_hosts | length }}"
      when: not enough_hosts

    - name: Compute required hosts to tag as busy
      set_fact:
        hosts_to_tag_busy: "{{ available_hosts[:requested_vms | int] | list }}"

    - name: Tag the required number of available hosts as busy, setting OAK_STATUS
      when: enough_hosts
      delegate_to: "{{ item }}"
      become: true
      lineinfile:
        path: /etc/environment
        create: yes
        regexp: '^OAK_STATUS='
        line: 'OAK_STATUS=busy'
      with_items: "{{ hosts_to_tag_busy }}"

    - name: Store reserved_hosts group in stats
      set_fact:
        reserved_hosts: "{{ available_hosts[:requested_vms | int] | list }}"

    - name: Matching deploy strategy with reserved hosts
      set_stats:
        data:
          onedoc: "{{ onedoc }}"
          mdoc: "{{ mdoc }}"
          num_clusters: "{{ num_clusters }}"
          num_nodes: "{{ num_nodes }}"
          topology_desc: "{{ topology_desc }}"
          requested_vms: "{{ requested_vms }}"
          reserved_hosts: "{{ reserved_hosts }}"

    - name: Assign hosts to groups based on the conditions
      set_stats:
        data:
          group_1doc: "{{ reserved_hosts[:1] if onedoc else [] }}"
          group_rc_together: "{{ reserved_hosts[:1] if not onedoc and mdoc else [] }}"
          group_rc_workers: "{{ reserved_hosts[1:] if not onedoc and mdoc else [] }}"
          group_root_full: "{{ reserved_hosts[:1] if not onedoc and not mdoc else [] }}"
          group_clusters_full: "{{ reserved_hosts[1:(1 + (num_clusters | int))] if not onedoc and not mdoc else [] }}"
          group_workers_full: "{{ reserved_hosts[(1 + (num_clusters | int)):(1 + (num_clusters | int) + (num_nodes | int))] if not onedoc and not mdoc else [] }}"
